@page
@model IOptionsMonitorAzureSettingsApp.Pages.Index1Model
@{
}

<h1 class="text-center">Azure Settings</h1>

<div class="d-flex justify-content-center">
    <div id="settings">
        <p><strong>Connection String:</strong> @Model.Settings.ConnectionString</p>
        <p><strong>Tenant ID:</strong> @Model.Settings.TenantId</p>
    </div>
</div>


<script>
    /*
     *
     * Purpose:
     * This script ensures that the Razor Page automatically detects and reflects changes in settings without requiring manual
     * refreshes, providing a dynamic and responsive user experience.
     *
     * The code implements a polling mechanism to detect changes in application settings by periodically
     * fetching data from the server.
     *
     * - A setInterval function is set to run every 5 seconds (5000ms).
     * - A fetch request is sent to the /api/settings endpoint [Settings page] to retrieve the latest settings snapshot.
     *
     * Change Detection:
     * - If the snapshotHash from the server differs from currentHash, it indicates that the settings have changed.
     * - A message is logged, and the page is reloaded using location.reload() to reflect the updated settings.
     *
     */
    let currentHash = "@Model.SnapshotHash";

    console.log("Polling script loaded. Current hash:", currentHash);

    setInterval(async () => {
        try {
            const response = await fetch('/api/settings');

            if (!response.ok) {
                console.warn("Polling failed:", response.statusText);
                return;
            }

            const data = await response.json();
            console.log("Received hash:", data.snapshotHash);

            if (data.snapshotHash !== currentHash) {
                console.log("Settings changed. Reloading...");
                location.reload();
            }
        } catch (e) {
            console.error("Polling error:", e);
        }
    }, 5000);
</script>